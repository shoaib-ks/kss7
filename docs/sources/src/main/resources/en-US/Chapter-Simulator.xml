<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "SS7_Stack_User_Guide.ent">
%BOOK_ENTITIES;
]>

<chapter id="simulator">

	<title>SS7 Simulator</title>

	<para>
		SS7 Simulator is an application for testing the &THIS.PLATFORM; &THIS.APPLICATION; and understanding its functionality. The test cases will allow you to conduct various test scenarios and explore the Stack. The Simulator is also a good example of how to use this Stack.  
	</para>


	
	<section id="simulator_configuring">
		<title>SS7 Simulator configuring 
		</title>

	<para>
		For Simulator compiling the following library is needed: com.sun.jdmk:jmxtools:jar:1.2.1.
		In order to download it manually:
			<itemizedlist> 
				<listitem>
					<para>
						Go to:
						<ulink url="http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-java-plat-419418.html#7657-jmx-1.2.1-oth-JPR&amp;usg=AFQjCNGOqUaCB1ULVG7cMULio9u70MKocA" />
					</para>
				</listitem>
				<listitem>
					<para>
						Select "Java Management Extension (JMX) 1.2.1"
					</para>
				</listitem>
				<listitem>
					<para>
						Press "Accept License Agreement"
					</para>
				</listitem>
				<listitem>
					<para>
						Download jmx-1_2_1-ri.zip file
					</para>
				</listitem>
				<listitem>
					<para>
						Extract lib/jmxtools:jar
					</para>
				</listitem>
				<listitem>
					<para>
						You can just put this file as ".m2/repository/com/sun/jdmk/jmxtools/1.2.1/jmxtools-1.2.1.jar" file into maven repository 
						(if ".m2/repository" is a root of this repository) or register it.
					</para>
				</listitem>
			</itemizedlist>
	</para>

	<para>
		After compiling Simulator binaries can be found in the folder simulator/bootstrap/target/simulator-ss7.
		Use "run.bat" or "run.sh" command file for running Simulator (from a folder simulator/bootstrap/target/simulator-ss7/bin).
	</para>

	<para>
		You can run several instances of Simulator from one folder.
		Each of this instances can have its own configuration options.
		Configuration options are saved into a xml configuration file.
		Each running instance has its own name (called "host name") and the name of configuration file depends on this host name.
		For example if the host name is "a1", the name of the configuration file will be "a1_simulator.xml".
		Each running Simulator instance must have different host name in order to each running Simulator instance can have different options.  
	</para>

	<para>
		Before running a test all layers must be configured.
		After test running a user can perform some actions depending on the test.
		Results of a test are emitted as "notifications". 
		Notifications are displayed in GUI interface of Simulator and Jconsole application (also GUI interface) and also are written into a file "&lt;host name&gt;.log" 
		(for example "a1.log") and into a console.
	</para>

	<para>
		You can run and manage SS7 Simulator locally or remotely.
		If you are running Simulator locally you are using a GUI interface. 
		If you are running Simulator remotely you can use RMI access (via a GUI interface) and HTML interface (using a HTML Browser).
	</para>

	
	<section id="simulator_configuring_locally">
		<title>Running SS7 Simulator locally
		</title>

	<para>
		In order to run SS7 Simulator locally you must run a command "run gui" (from a folder simulator/bootstrap/target/simulator-ss7/bin). 
		You can pass the only parameter which is the "host name". Possible examples (host name is "a1"): 
		<programlisting>
		run gui -na1
		run gui --name=a1
		</programlisting>
		The GUI application form "Connecting to a testerHost ..." will appear. You have to fill "Host name" field (if it is empty),
		select "Create a local testerHost" option and press "Start" button. The local Simulator host will be run.   
	</para>
	<figure>
  		<title>Launching Simulator in a local mode</title>
  		<mediaobject>
    		<imageobject>
      			<imagedata fileref="images/Simulator-Example1.png" format="PNG" align="center"/>
    		</imageobject>
  		</mediaobject>
	</figure>

	<para>
		The form "SS7 Simulator: &lt;host name&gt;-local" appears.
		The next step is selecting modules for layers 1-3 and a testing task and configuring modules (by pressing buttons "...").
		Button "Save" is used for saving options to the disk, button "Reload" is used for reloading options from a disk.
		When layer configuring you can press one of two buttons "Load default values for side A" and 
		"Load default values for side B" for loading default values for testing.
		These default values can be used if you are using SS7 Simulators in the one computer host
		as the side A and the side B for interaction.    
	</para>
	<figure>
  		<title>The main form of the Simulator</title>
  		<mediaobject>
    		<imageobject>
      			<imagedata fileref="images/Simulator-Example2.png" format="PNG" align="center"/>
    		</imageobject>
  		</mediaobject>
	</figure>

	<para>
		After configuring press button "Run test".
		The form for testing will be displayed.
		In the upper part of this form the information of layers and test state is displayed.
		This information is refreshed every 5 seconds and can be refreshed manually by "Refresh state" button pressing.
		After pressing "Start" button all modules will start and will be ready for test, after pressing "Stop" button all modules will stop.
		In the central part of the form notifications from testing modules are displayed.  
		In the lower part of the form test depended information are allocated. Details of this part is displayed in the corresponded test definition.   
		See <xref linkend="simulator_tests" />
	</para>
	<figure>
  		<title>The example of the Simulator testing form</title>
  		<mediaobject>
    		<imageobject>
      			<imagedata fileref="images/Simulator-Example3.png" format="PNG" align="center" scale="90"/>
    		</imageobject>
  		</mediaobject>
	</figure>

	</section>


	<section id="simulator_configuring_remotely">
		<title>Running SS7 Simulator remotely 
		</title>

	<para>
		Now there are two interfaces for managing: RMI and HTML adapters. Both two styles of management can be run at the same time.  
	</para>

	<para>
		For launching Simulator remotely we should firstly run a tester host. The format of launching a tester host is:  
		<programlisting>
		run core -na1 -t8001 -r9999
		</programlisting>
		or
		<programlisting>
		run core --name=a1 --http=8001 --rmi=9999
		</programlisting>
		Options "-n" (or "--name=") defines a host name ("a1").
		Options "-r" (or "--rmi=") defines a port for rmi requests listerning (9999).
		Options "-t" (or "--http=") defines a port for html requests listerning (8001).
		You can use only rmi connector or only http connector or both.
	</para>


	<section id="simulator_configuring_remotely_rmi">
		<title>RMI interface
		</title>

	<para>
		The best client for management via RMI interface is the GUI interface of Simulator.
		It can be launched by the same way as we launch Simulator locally: 
		<programlisting>
		run gui
		</programlisting>
		After launching we should select the option "Connect to the existing testerHost via JMX" and
		in the default RMI connection string replace "localhost" with the proper IP address of the tester host computer
		and the "9999" with the proper RMI port (the port from option "-r" or "--rmi=") (if needed).
		After connecting the management will be the same as if the application is run locally (see <xref linkend="simulator_configuring_locally" />).
	</para>
	<figure>
       <title>Launching Simulator GUI for a remote mode</title>
  		<mediaobject>
    		<imageobject>
      			<imagedata fileref="images/Simulator-Example4.png" format="PNG" align="center"/>
    		</imageobject>
  		</mediaobject>
	</figure>

	<para>
		"Jconsole" application can be also used as the client. But this application is less convenient.  
	</para>
	</section>


	<section id="simulator_configuring_remotely_html">
		<title>HTPL interface 
		</title>

	<para>
		HTML management is less convenient than RMI management. But it can be used if RMI is not acceptable (for example if we are behind a proxy).
		For paramters configuring and luanching tests we can use any html browser. Use "http://&lt;IP address&gt;:&lt;port&gt;" as an URL.
		The port is defined in "-t" or "--http=" options.
	<figure>
       <title>Managing of a Simulator by a Browser (HTMP connector)</title>
  		<mediaobject>
    		<imageobject>
      			<imagedata fileref="images/Simulator-Example5.png" format="PNG" align="center"/>
    		</imageobject>
  		</mediaobject>
	</figure>
		"TesterHost" is a main MBean in which we can select the mode for test working, start/stop testing (buttons "Start"/"Stop"),
		quit a tester host (button "quit"). Use other beans for setting options for layers and test tasks. 									
	<figure>
       <title>TesterHost bean</title>
  		<mediaobject>
    		<imageobject>
      			<imagedata fileref="images/Simulator-Example6.png" format="PNG" align="center" scale="70"/>
    		</imageobject>
  		</mediaobject>
	</figure>
	</para>
	<para>
		Results of Simulator working can be found at the console (at the server) or in the log file (file name is like "a1.log").    
	</para>
	</section>

	</section>

	
	<section id="simulator_configuring_layers">
		<title>Configuring Simulator layers 
		</title>

	<para>
		Some remarks of configuring the Mobicents stack for Simulator is described in this chapter.
	</para>


	<section id="simulator_configuring_layers_sccp">
		<title>SCCP 
		</title>

	<para>
		SCCP layer supports processing messages in two modes:		
			<itemizedlist> 
				<listitem>
					<para>
						Route on DPC and SSN mode
					</para>
				</listitem>
				<listitem>
					<para>
						Route on GlobalTitle mode
					</para>
				</listitem>
			</itemizedlist>
	</para>

	<para>
		For both modes we need to set the following options:
			<itemizedlist> 
				<listitem>
					<para>
						Remote SPC
					</para>
				</listitem>
				<listitem>
					<para>
						Local SPC
					</para>
				</listitem>
				<listitem>
					<para>
						Network indicator
					</para>
				</listitem>
				<listitem>
					<para>
						Remote SSN
					</para>
				</listitem>
				<listitem>
					<para>
						Local SSN
					</para>
				</listitem>
			</itemizedlist>
	</para>

	<para>
		When starting SCCP layer creates:
			<itemizedlist> 
				<listitem>
					<para>
						Mtp3ServiceAccessPoint (using Local SPC and Network indicator)
						with the single Mtp3Destination (Remote SPC, all SLS's)
					</para>
				</listitem>
				<listitem>
					<para>
						RemoteSpc (using Remote SPC)
					</para>
				</listitem>
				<listitem>
					<para>
						RemoteSsn (using Remote SPC and Remote SSN)
					</para>
				</listitem>
			</itemizedlist>
	</para>

	<para>
		For "Route on GlobalTitle" mode there are following extra options:
			<itemizedlist> 
				<listitem>
					<para>
						GlobalTitle type ("Nature of address indicator only", "Translation type only",
						"Translation type, numbering plan and encoding scheme",
						"Translation type, numbering plan, encoding scheme and NOA ind"),
						the last choice is default
					</para>
				</listitem>
				<listitem>
					<para>
						AddressNature
					</para>
				</listitem>
				<listitem>
					<para>
						NumberingPlan
					</para>
				</listitem>
				<listitem>
					<para>
						Translation type
						(those four options are used both for CalledPartyAddress, CallingPartyAddress and routing rules)
					</para>
				</listitem>
				<listitem>
					<para>
						CallingPartyAddress digits
					</para>
				</listitem>
			</itemizedlist>
	</para>

	<para>
		If "Route on GlobalTitle" mode is used, two rules for routing are created when SCCP layer starting.
		All remore originated messages will be routed to a local user, 
		all local originated messages will be routed to a remote user (to a peer with "Remote SPC" address).  
	</para>

	<para>
		SCCP layer provide creating CalledPartyAddress and CallingPartyAddress
		for upper layers and test cases. When "Route on DPC and SSN" mode these are 
		ROUTING_BASED_ON_DPC_AND_SSN with no GlobalTitle, pc=Local SPC (for CallingPartyAddress)
		or Remote SSN (for CalledPartyAddress), SSN=Local SSN and Remote SSN accordingly.
	</para>

	<para>
		When "Route on GlobalTitle" mode ROUTING_BASED_ON_GT is used:
			<itemizedlist> 
				<listitem>
					<para>
						CallingPartyAddress is created based on CallingPartyAddress digits and Local SSN.
					</para>
				</listitem>
				<listitem>
					<para>
						CalledPartyAddress is created using digits and SSN that are supplied by upper levels or test cases.
					</para>
				</listitem>
			</itemizedlist>
	</para>

	<figure>
  		<title>SCCP settings form</title>
  		<mediaobject>
    		<imageobject>
      			<imagedata fileref="images/Simulator-Example9.png" format="PNG" align="center"/>
    		</imageobject>
  		</mediaobject>
	</figure>
	</section>

	</section>

	</section>


	<section id="simulator_tests">
		<title>SS7 Simulator test cases 
		</title>

	<para>
		Several test cases are implemened now. 
	</para>

	<section id="simulator_test_ussdserver">
		<title>USSD Server 
		</title>

	<para>
		UssdServer test can work in manual and automatic modes.
		In the manual mode a user manually inserts the response message value and sends ProcessUnstructuredSs response (or UnstructuredSs request) to the Ussd client.
		In the automatic mode UssdServer automatically sends a predefined message as an ProcessUnstructuredSs response ("Auto sending ProcessUnstructuredSsResponse" option)
		or automatically sends a predefined message as an UnstructuredSs request and then 
		sends a predefined message ProcessUnstructuredSs response ("Auto sending Unstructured_SS_Request then after response sending ProcessUnstructuredSsResponse" option).
		Use "Auto sending ProcessUnstructuredSsResponse" option for UssdServer if UssdClient is used for a load test ("Auto sending ProcessUnstructuredSSRequest").
		For load tests we recommend to check the option "One notification for 100 dialogs" for preventing too many notifications when load testing. 
	</para>

	<para>
		UssdServer test can perform followng tasks:
			<itemizedlist> 
				<listitem>
					<para>
						Sending a ProcessUnstructiredSs response / UnstructiredSs request in automatic or manual modes.
						Ussd Client must initiate a dialog using ProcessUnstructiredSs request.
					</para>
				</listitem>
				<listitem>
					<para>
						Manually sending an UnstructuredSsNotify. 
					</para>
				</listitem>
			</itemizedlist>
	</para>

	<figure>
  		<title>Ussd Server option form</title>
  		<mediaobject>
    		<imageobject>
      			<imagedata fileref="images/Simulator-Example8.png" format="PNG" align="center"/>
    		</imageobject>
  		</mediaobject>
	</figure>

	</section>


	<section id="simulator_test_ussdclient">
		<title>USSD Client 
		</title>

	<para>
		UssdClient test can perform following tasks:
			<itemizedlist> 
				<listitem>
					<para>
						Sending a ProcessUnstructuredSs request, waiting for the answer and displaying the answer 
					</para>
				</listitem>
				<listitem>
					<para>
						Sending a UnstructuredSs response as an answer for UnstructuredSs request    
					</para>
				</listitem>
				<listitem>
					<para>
						Receiving UnstructuredSs notify and displaying it
					</para>
				</listitem>
				<listitem>
					<para>
						Spectial case for load testing: Sending to the Ussd server a flow of ProcessUnstructuredSs requests without stopping (and receiving responses).
					</para>
				</listitem>
			</itemizedlist>
	</para>

	<para>
		For working in the manual mode select the option "Manual operation", for auto sending messages - the option "Auto sending ProcessUnstructuredSSRequest".  
		You can send ProcessUnstructuredSs request and UnstructuredSs response only manually by inserting a message text and 
		pressing buttons.
		For working in the auto mode you should define the string of auto processUnstructuredSs request and the count of maximum active MAP dialogs (default value is 10).
		The more dialogs is defined the more messages per second will be sent.
		Msisdn, data coding schema and alerting pattern values should be also configured before test starting.
		For the auto mode we recomment to check the option "One notification for 100 dialogs" for preventing too many notifications when load testing. 
	</para>

	<para>
		You can send ProcessUnstructuredSs request and UnstructuredSs response manually by inserting a message text and 
		pressing buttons.
		You can not send a new ProcessUnstructiredSs request till the response for previos request has been received (or till dialog timeout).
		You can also manually close the current dialog by pressing "Close current dialog" button.
	</para>

	<figure>
       <title>Ussd Client option form</title>
  		<mediaobject>
    		<imageobject>
      			<imagedata fileref="images/Simulator-Example7.png" format="PNG" align="center"/>
    		</imageobject>
  		</mediaobject>
	</figure>

	</section>


	<section id="simulator_test_smsserver">
		<title>SMS Server 
		</title>

	<para>
		SMS Server simulates the behavior of SMSC, it can:
			<itemizedlist> 
				<listitem>
					<para>
						Send sendRoutingInfoForSM to the HLR and receive the response
					</para>
				</listitem>
				<listitem>
					<para>
						Send mt-forwardSM to the VLR and receive the response 
					</para>
				</listitem>
				<listitem>
					<para>
						Send sendRoutingInfoForSM to the HLR, receive the response and send mt-forwardSM using data from the first request 
					</para>
				</listitem>
				<listitem>
					<para>
						Receive mo-forwardSM request from VLR and display the received message 
					</para>
				</listitem>
			</itemizedlist>
	</para>

	<para>
		We need to set the following options to SMS server:
			<itemizedlist> 
				<listitem>
					<para>
						AddressNature and NumberingPlan for AddressString creation
					</para>
				</listitem>
				<listitem>
					<para>
						TypeOfNumber and NumberingPlanIdentification SMS tpdu addresses
					</para>
				</listitem>
				<listitem>
					<para>
						MAP protocol version (1, 2 or 3) (version 3 is default) 
					</para>
				</listitem>
				<listitem>
					<para>
						Character set for SMS message encoding (GSM7 or UCS2)
					</para>
				</listitem>
				<listitem>
					<para>
						Origination Service center address string (this address must be equal the SCCP layer CallingPartyAddress digits) 
					</para>
				</listitem>
				<listitem>
					<para>
						HLR and VLR SSN values (default values are 8 and 6) 
					</para>
				</listitem>
			</itemizedlist>
	</para>

	<para>
		Remark: if you want to use SMS Server and SMS Client for sending SMS to each other: set HLR SSN at SMS Server the equal value that VLR SSN (8 in our case)
	</para>

	<figure>
  		<title>SMS client settings form</title>
  		<mediaobject>
    		<imageobject>
      			<imagedata fileref="images/Simulator-Example11.png" format="PNG" align="center"/>
    		</imageobject>
  		</mediaobject>
	</figure>

	<para>
		After starting SMS server you can:
			<itemizedlist> 
				<listitem>
					<para>
						For sending sendRoutingInfoForSM ("Send SRIForSM" button) we should set "Destination ISDN number"
					</para>
				</listitem>
				<listitem>
					<para>
						For sending sendRoutingInfoForSM and then mt-forwardSM ("Send SRIForSM + MtForwardSM" button) we should set
						"Message text", "Destination ISDN number" and "Origination ISDN number"
					</para>
				</listitem>
				<listitem>
					<para>
						For sending mt-forwardSM only ("Send MtForwardSM" button) we should set
						"Message text", "IMSI", "VLR number" and "Origination ISDN number" 
					</para>
				</listitem>
			</itemizedlist>
	</para>

	</section>

	<section id="simulator_test_smsclient">
		<title>SMS Client 
		</title>

	<para>
		SMS Client simulates the behavior of HLR or VLR, it can:
			<itemizedlist> 
				<listitem>
					<para>
						Receive sendRoutingInfoForSM from SMSC and send as a response predefined IMSI and VLR number
					</para>
				</listitem>
				<listitem>
					<para>
						Receive mt-forwardSM from SMSC and display the received message
					</para>
				</listitem>
				<listitem>
					<para>
						Send mo-forwardSM to the SMSC 
					</para>
				</listitem>
			</itemizedlist>
	</para>

	<para>
		We need to set the following options to SMS client:
			<itemizedlist> 
				<listitem>
					<para>
						AddressNature and NumberingPlan for AddressString creation
					</para>
				</listitem>
				<listitem>
					<para>
						TypeOfNumber and NumberingPlanIdentification SMS tpdu addresses
					</para>
				</listitem>
				<listitem>
					<para>
						MAP protocol version (1, 2 or 3) (version 3 is default) 
					</para>
				</listitem>
				<listitem>
					<para>
						Character set for SMS message encoding (GSM7 or UCS2) 
					</para>
				</listitem>
				<listitem>
					<para>
						Destination Service center address string (this address must be equal the SCCP layer CallingPartyAddress digits)
					</para>
				</listitem>
				<listitem>
					<para>
						SMSC SSN value (default value is 8) 
					</para>
				</listitem>
				<listitem>
					<para>
						IMSI and VLR addresses values that will be used when responding on sendRoutingInfoForSM 
					</para>
				</listitem>
			</itemizedlist>
	</para>

	<figure>
  		<title>SMS client settings form</title>
  		<mediaobject>
    		<imageobject>
      			<imagedata fileref="images/Simulator-Example10.png" format="PNG" align="center"/>
    		</imageobject>
  		</mediaobject>
	</figure>

	<para>
		After starting SMS client you can:
			<itemizedlist> 
				<listitem>
					<para>
						For sending mo-forwardSM ("Send MoForwardSM" button) we should set
						"Message text", "Destination ISDN number" and "Origination ISDN number"
					</para>
				</listitem>
				<listitem>
					<para>
						When recieving sendRoutingInfoForSM client automatically generate a response with preconfigured IMSI and VLR address 						
					</para>
				</listitem>
			</itemizedlist>
	</para>

	</section>

	</section>

</chapter>

