<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "SS7_Stack_User_Guide.ent">
%BOOK_ENTITIES;
]>

<chapter
	id="setup">
	<title>Installation and Running</title>
	<section
		id="installing_and_using">
		<title>Installing</title>
		<para>&THIS.PLATFORM; SS7 stack at its core requires only Java if you are using only <literal>M3UA</literal>. 
		However if you plan to use <literal>Dahdi</literal>, <literal>Dialogic</literal> or <literal>Telestax</literal> SS7 hardware, respective SS7 cards 
		needs to be installed on the server along with native libraries.</para>
		
		<para>A simple way to get started is to download and install binary. This will provide you with all the dependencies you need to get going. 
		You can obtain binary release from &THIS.RELEASE_BINARY_URL;
		</para>

		<section
			id="dependencies">
			<title>Binary</title>
			<para>The &THIS.PLATFORM; &THIS.APPLICATION; binary is broken down into a few modules.</para>
			
			<para>Binary release has following layout:</para>
            <mediaobject id="binary_layout">
                    <imageobject>
                            <imagedata width="300px" align="center" fileref="images/binnar-structure.png" format="PNG" />
                    </imageobject>
                    <caption>
                            <para>&THIS.PLATFORM; &THIS.APPLICATION; binary layout.
                            </para>
                    </caption>
            </mediaobject>                                  
            <note>
                    <title>Note</title>
                    <para>
                            X.Y.Z in above layout is the respective release version of binary.
                    </para>
            </note>			
			
			<para>The following is a description of the important services and libraries that make up &THIS.PLATFORM; &THIS.APPLICATION;</para>
			<itemizedlist>
				<listitem>
					<para><literal>asn</literal> : Abstract Syntax Notation One (ASN.1) library is used by various &THIS.PLATFORM; &THIS.APPLICATION;
					protocols to encode/decode the structured data exchanged between Signaling Point over networks. To know more about asn library refer to 
					document included with asn. Applications using any of the &THIS.PLATFORM; &THIS.APPLICATION; User Protocols may never need to call asn API directly,
					however it must be in classpath as &THIS.PLATFORM; &THIS.APPLICATION; User Protocols refers this library.</para>
				</listitem>
				<listitem>
					<para><literal>sctp</literal> : Stream Control Transmission Protocol (SCTP) Library is providing the convenient API's over Java SCTP. 
					This library will be used only if M3UA layer is used. 
					</para>
					<para>
					        To understand more about sctp, refer to documentation included in <filename>sctp/docs</filename>
                    </para>
                </listitem>
				<listitem>
					<para>
						<filename>ss7</filename> 
						: ss7 contains the core protocol libraries to be used by end application as well as 
                        service that is deployed in JBoss AS. The sub-modules included in ss7 are 
					</para>
					<itemizedlist>
						<listitem>
							<para><filename>docs</filename> : User guide for &THIS.PLATFORM; &THIS.APPLICATION; </para>
						</listitem>
						<listitem>
							<para><filename>mobicents-sgw</filename> : Standalone Signaling Gateway as explained in section 
							<xref linkend="mobicents_signaling_gateway" /> </para>
							<para>mobicents-sgw binary has following layout:</para>
							<mediaobject id="binary_sgw">
								<imageobject>
									<imagedata width="300px" align="center" fileref="images/sgw-binary.png" format="PNG" />
								</imageobject>
							</mediaobject>
														
						</listitem>							
						<listitem>
							<para><filename>mobicents-ss7-service</filename> : SS7 service is the core engine as explained in section 
							<xref linkend="design_overview_ss7_service" /> </para>
							
							<para>mobicents-ss7-service binary has following layout:</para>
							<mediaobject id="binary_ss7-service">
								<imageobject>
									<imagedata width="300px" align="center" fileref="images/binary-ss7-service.png" format="PNG" />
								</imageobject>
							</mediaobject>							
						</listitem>	
						<listitem>
							<para><filename>mobicents-ss7-simulator</filename> : SS7 Simulator is an application for testing SS7 stack and displaying its functionality. 
							It is also a good example of how to use this stack.</para>
							
							<para>mobicents-ss7-simulator binary has following layout:</para>
							<mediaobject id="binary_ss7-simulator">
								<imageobject>
									<imagedata width="300px" align="center" fileref="images/binary-ss7-simulator.png" format="PNG" />
								</imageobject>
							</mediaobject>							
						</listitem>									
						<listitem>
							<para><filename>native</filename> : native libraries component to interact with SS7 Card installed on server, runtime component. 
							As of now native libraries are compiled only for linux OS. However if you plan to use <literal>M3UA</literal> there is 
							no dependency on OS as everything is 100% java.</para>
						</listitem>	
						<listitem>
							<para><filename>protocols</filename> : The &THIS.PLATFORM; &THIS.APPLICATION; User Protocols libraries. Your application would directly 
							call the API's exposed by these libraries. Depending on application you may be either interested in <literal>TCAP</literal>, 
							<literal>MAP</literal> or both or <literal>ISUP</literal> libraries</para>
						</listitem>	
						<listitem>
							<para><filename>shell</filename> : the Command Line Interface (CLI) module to manage the &THIS.PLATFORM; &THIS.APPLICATION;.
							Refer <xref linkend="shell"/> to understand how to use shell</para>
						</listitem>	
					</itemizedlist>
				</listitem>				
				<!-- <listitem> <para>&THIS.PLATFORM; <literal>M3UA</literal> library </para> </listitem> -->
			</itemizedlist>
		</section>
	</section>
       <section id="mobicents_ss7_service">
                <title>&THIS.PLATFORM; SS7 Service</title>
                <para>
                        As the name indicates &THIS.PLATFORM; SS7 Service is a deployable service that can be deployed in any container that supports
                        <literal>JMX</literal> and exposes <literal>JNDI</literal>
                </para>
                <para>
                        &THIS.PLATFORM; SS7 Service exposes convenient way of configuring SS7 stack via CLI commands. Service wraps SS7 level 4 i.e., MAP, CAP and ISUP
                        and lower layers and exposes it via JNDI such that layer above can do the look-up and use it in any application. 
                </para>
        </section>
		<section
			id="installing_binary">
			<title>Installing &THIS.PLATFORM; SS7 Service Binary</title>
			<para>The SS7 Application depends on &THIS.PLATFORM; SS7 Service and &THIS.PLATFORM; SS7 Service
			must be installed before application can use it. The &THIS.PLATFORM; SS7 Service binary requires that you have 
			JBoss Application Server installed and JBOSS_HOME system property set. To know further details on setting JBOSS_HOME look 
			<xref linkend="jboss_home_setup" /> </para>
			
			<para>Once JBOSS_HOME is properly set, use ant to deploy the mobicents-ss7-service, shell scripts and shell library.</para>
			<important>
						<para>
							Ant 1.6 (or higher) is used to install the binary. Instructions for using Ant, including install, can be found at <ulink url="http://ant.apache.org/" /></para>
			</important>
			<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;/ss7
[usr]$ ant deploy
			</programlisting>
			<para>To undeploy these services</para>
			<programlisting>
[usr]$ cd &THIS.APPLICATION.DIRNAME;-&THIS.VERSION;/ss7
[usr]$ ant undeploy
			</programlisting>		
			
			<para>
				While above steps will deploy the necessary ss7 service and shell components, the <literal>java.library.path</literal>
				should be set to point the directory containing native component or should be copied to JBoss native library path manually. 
				This step is only required if you are using the SS7 board on server.  
			</para>	
		</section>



		<section
			id="running_binary">
			<title>Running &THIS.PLATFORM; SS7 Service</title>
			<para>
				Starting or stopping &THIS.PLATFORM; SS7 Service is no different than starting or stopping JBoss Application Server
			</para>
			<section
				id="starting_binary">
				<title>Starting</title>
				<para>
					Once installed, you can run server by executing the run.sh (Unix) or run.bat (Microsoft Windows)
					startup scripts in the <filename>&lt;install_directory&gt;/bin</filename> directory (on Unix or Windows). 
					If the service started properly you should see following lines in the Unix terminal or Command Prompt depending on your environment:
				</para>
				<screen><![CDATA[
20:34:20,329 INFO  [ManagementImpl] (main) SCTP configuration file path /home/abhayani/workarea/mobicents/binary/JSLEE/ss7-mobicents-jainslee-2.7.0.FINAL-jboss-5.1.0.GA/jboss-5.1.0.GA/server/default/data/SCTPManagement_sctp.xml
20:34:20,343 INFO  [SelectorThread] (Thread-17) SelectorThread for Management=SCTPManagement started.
20:34:20,343 INFO  [ManagementImpl] (main) Started SCTP Management=SCTPManagement WorkerThreads=0 SingleThread=true
20:34:20,413 INFO  [M3UAManagement] (main) M3UA configuration file path /home/abhayani/workarea/mobicents/binary/JSLEE/ss7-mobicents-jainslee-2.7.0.FINAL-jboss-5.1.0.GA/jboss-5.1.0.GA/server/default/data/Mtp3UserPart_m3ua.xml
20:34:20,413 INFO  [M3UAManagement] (main) Started M3UAManagement
20:34:20,424 INFO  [Scheduler] (main) Starting 
20:34:20,424 INFO  [Scheduler] (main) Started 
20:34:20,442 INFO  [SccpStackImpl-SccpStack] (main) Starting ...
20:34:20,450 INFO  [Router] (main) SCCP Router configuration file path /home/abhayani/workarea/mobicents/binary/JSLEE/ss7-mobicents-jainslee-2.7.0.FINAL-jboss-5.1.0.GA/jboss-5.1.0.GA/server/default/data/SccpStack_sccprouter.xml
20:34:20,451 INFO  [Router] (main) Started SCCP Router
20:34:20,451 INFO  [SccpResource] (main) SCCP Resource configuration file path /home/abhayani/workarea/mobicents/binary/JSLEE/ss7-mobicents-jainslee-2.7.0.FINAL-jboss-5.1.0.GA/jboss-5.1.0.GA/server/default/data/SccpStack_sccpresource.xml
20:34:20,451 INFO  [SccpResource] (main) Started Sccp Resource
20:34:20,451 INFO  [SccpStackImpl-SccpStack] (main) Starting routing engine...
20:34:20,451 INFO  [SccpStackImpl-SccpStack] (main) Starting management ...
20:34:20,451 INFO  [SccpStackImpl-SccpStack] (main) Starting MSU handler...
20:34:20,466 INFO  [ShellServer] (main) Starting SS7 management shell environment
20:34:20,470 INFO  [ShellServer] (main) ShellExecutor listening at /127.0.0.1:3435
20:34:20,493 INFO  [TCAPStackImpl] (main) Starting ...org.mobicents.protocols.ss7.tcap.TCAPProviderImpl@24fcd6bb
20:34:20,493 INFO  [TCAPProviderImpl] (main) Starting TCAP Provider
20:34:20,493 INFO  [TCAPProviderImpl] (main) Registered SCCP listener with address 8
20:34:20,496 INFO  [TCAPStackImpl] (main) Starting ...org.mobicents.protocols.ss7.tcap.TCAPProviderImpl@9d55d00
20:34:20,496 INFO  [TCAPProviderImpl] (main) Starting TCAP Provider
20:34:20,497 INFO  [TCAPProviderImpl] (main) Registered SCCP listener with address 146
20:34:20,499 INFO  [TCAPStackImpl] (main) Starting ...org.mobicents.protocols.ss7.tcap.TCAPProviderImpl@7712e5aa
20:34:20,499 INFO  [TCAPProviderImpl] (main) Starting TCAP Provider
20:34:20,499 INFO  [TCAPProviderImpl] (main) Registered SCCP listener with address 9
20:34:20,716 INFO  [SS7Service] (main)  [[[[[[[[[ Mobicents jSS7 2.0.0-SNAPSHOT TCAP service started ]]]]]]]]] 
20:34:20,756 INFO  [SS7Service] (main)  [[[[[[[[[ Mobicents jSS7 2.0.0-SNAPSHOT MAP service started ]]]]]]]]] 
20:34:20,765 INFO  [SS7Service] (main)  [[[[[[[[[ Mobicents jSS7 2.0.0-SNAPSHOT CAP service started ]]]]]]]]] 
20:34:20,775 INFO  [SS7Service] (main)  [[[[[[[[[ Mobicents jSS7 2.0.0-SNAPSHOT ISUP service started ]]]]]]]]] 
20:34:20,801 INFO  [Http11Protocol] (main) Starting Coyote HTTP/1.1 on http-127.0.0.1-8080
20:34:20,816 INFO  [AjpProtocol] (main) Starting Coyote AJP/1.3 on ajp-127.0.0.1-8009
20:34:20,821 INFO  [ServerImpl] (main) JBoss (Microcontainer) [5.1.0.GA (build: SVNTag=JBoss_5_1_0_GA date=200905221634)] Started in 27s:39ms


]]>
				</screen>	
				
				<para>If you have started &THIS.APPLICATION.DIRNAME;-&THIS.VERSION; for the first time, SS7 is not configured. 
				You need to use Shell Client to connect to &THIS.APPLICATION.DIRNAME;-&THIS.VERSION; as defined in 
				<xref linkend="shell" /> . With <literal>CLI</literal> you can configure how service interacts with SS7 network, that is you configure either installed SS7 card and its native library
				, or <literal>M3UA</literal> layer.</para>
				
				<para>Once the configured, the state and configuration of SS7 is persisted which stands server re-start.</para> 
							
			</section>		
			<section
				id="stopping_binary">
				<title>Stopping</title>
					<para>You can shut down the server(s) by executing the <command>shutdown.sh -s</command> (Unix) or 
					<command>shutdown.bat -s</command> (Microsoft Windows) scripts in the <filename>&lt;install_directory&gt;/bin</filename> 
					directory (on Unix or Windows). Note that if you properly stop the server, you will see the following three lines as the 
					last output in the Unix terminal or Command Prompt:</para>
                        <screen><![CDATA[[Server] Shutdown complete
Halting VM]]></screen>

			</section>	
		</section>	

	
	<section id="configuring">
		<title>
			Configuring &THIS.PLATFORM; SS7 Service
		</title>
		<para>Configuration is done through an XML descriptor named <filename>jboss-beans.xml</filename> and is 
		located at <filename>$JBOSS_HOME/server/profile_name/deploy/mobicents-ss7-service/META-INF</filename>, where 
		<application>profile_name</application> is the server profile name.</para>
		
		<para>The &THIS.PLATFORM; SS7 Layer 4 (<literal>SCCP, ISUP</literal>) leverages either of following <literal>MTP</literal> 
		layers to exchange signaling messages with remote signaling points</para>
		
		<itemizedlist>
			<listitem>
				<para><literal>M3UA</literal></para>
			</listitem>
			<listitem>
				<para><literal>dahdi</literal></para>
			</listitem>			
			<listitem>
				<para><literal>dialogic</literal></para>
			</listitem>			
		</itemizedlist>
		
		<para>The ss7 service will be configured with either of these services.</para>
		
		<section id="configuring_Rem_SGW">
			<title>Configuring M3UA</title>
			<para> 
                    <literal>M3UAManagement</literal> is only needed if the underlying SS7 service will leverage <literal>M3UA</literal>.
                    <classname>M3UAManagement</classname> configuration is further explained in <xref linkend="Section-Shell_M3UA.xml" /> 
            </para>
			
					<programlisting language="XML" role="XML"><![CDATA[
	<!-- ==================================================================== -->
	<!-- SCTP Properties                                                      -->
	<!-- Used by M3UA layer													  -->
	<!-- ==================================================================== -->	
	<bean name="SCTPManagement" class="org.mobicents.protocols.sctp.ManagementImpl">
		<constructor>
			<parameter>SCTPManagement</parameter>
		</constructor>
		<property name="persistDir">${jboss.server.data.dir}</property>
		<property name="singleThread">true</property>
		<property name="connectDelay">5000</property>
	</bean>

	<bean name="SCTPShellExecutor"
		class="org.mobicents.protocols.ss7.m3ua.impl.oam.SCTPShellExecutor">
		<property name="sctpManagement">
			<inject bean="SCTPManagement" />
		</property>
	</bean>

	<!-- ==================================================================== -->
	<!-- M3UA -->
	<!-- M3UAManagement is managing the m3ua side commands -->
	<!-- ==================================================================== -->
	<!-- -->
	<bean name="Mtp3UserPart" class="org.mobicents.protocols.ss7.m3ua.impl.M3UAManagement">
		<constructor>
			<parameter>Mtp3UserPart</parameter>
		</constructor>
		<property name="persistDir">${jboss.server.data.dir}</property>
		<property name="transportManagement"><inject bean="SCTPManagement" /></property>
		<property name="routingLabelFormat"><inject bean="RoutingLabelFormat" /></property>	
	</bean>

	<bean name="M3UAShellExecutor"
		class="org.mobicents.protocols.ss7.m3ua.impl.oam.M3UAShellExecutor">
		<property name="m3uaManagement">
			<inject bean="Mtp3UserPart" />
		</property>
	</bean>]]>
                        </programlisting>		
			 <para>
                     <classname>org.mobicents.protocols.sctp.ManagementImpl</classname> takes <classname>String</classname> as constructor
                     argument. The name is prepend to <literal>xml</literal> file created by SCTP stack for persisting state of SCTP resources. 
                     The <literal>xml</literal> is stored in path specified by <literal>persistDir</literal> property above.
             </para>
             <para>
                     For example in above case, when &THIS.PLATFORM; SS7 Service is started file <filename>SCTPManagement_sctp.xml</filename> 
                     will be created at <filename>$JBOSS_HOME/server/profile_name/data</filename> directory.
             </para>
             <para>                          
                      Stack has following properties: 
                      <variablelist>
                              <varlistentry>
                                      <term>singleThread</term>
                                      <listitem>
                                              <para>SCTP stack is implemented such that 1 thread is dedicated for IO and by default 1 thread for calling application above SCTP. Its possible to configure 
                                              multiple threads for calling applications above in which case <literal>singleThread</literal> should be set to false and set <literal>workerThreads</literal> 
                                              to number of threads you want.  </para>
                                      </listitem>
                              </varlistentry>  
                              <varlistentry>
                                      <term>workerThreads</term>
                                      <listitem>
                                              <para>Number of worker threads to call the application above SCTP. By default only one thread is used.</para>
                                      </listitem>
                              </varlistentry>                                                             
                              <varlistentry>
                                      <term>connectDelay</term>
                                      <listitem>
                                              <para>
                                                      If the SCTP Socket is client-side, connectDelay specifies the delay time in milliseconds before which connection with the server will attempted.
                                                      This delay is necessary when there is network disruption and connection between client and server breaks so that SCTP stack doesn't continuously 
                                                      attempt to reconnect. 
                                              </para>
                                      </listitem>
                              </varlistentry>                                 
                      </variablelist>
              </para>             
             <para>
                     <classname>org.mobicents.protocols.ss7.m3ua.impl.M3UAManagement</classname> takes <classname>String</classname> as constructor
                     argument. The name is prepend to <literal>xml</literal> file created by M3UA stack for persisting state of M3UA resources. 
                     The <literal>xml</literal> is stored in path specified by <literal>persistDir</literal> property above.
             </para>
             <para>
                     For example in above case, when &THIS.PLATFORM; SS7 Service is started file <filename>Mtp3UserPart_m3ua.xml</filename> 
                     will be created at <filename>$JBOSS_HOME/server/profile_name/data</filename> directory
             </para>
             <para>
             	Stack has following properties:
             	<variablelist>
             		<varlistentry>
             			<term>routingLabelFormat</term>
             			<listitem>
             				<para>
             					The routing label format supported by this network. See <xref linkend="configuring_routing_label_format"/> for further details.
             				</para>
             			</listitem>
             		</varlistentry>
             	</variablelist>
             </para>

		</section>
					
		<section id="configuring_LinksetFactory">
			<title>Configuring dahdi</title>
			<para><literal>Dahdi</literal> based MTP layer will only be used when you have installed dahdi based SS7 hardware (Sangoma or Diguim cards). 
			
			<literal>DahdiLinksetFactory</literal> is responsible to create 
			new instances of corresponding <literal>DahdiLinkset</literal> when instructed by <literal>LinksetManager</literal>. 
			</para>
			
			<itemizedlist>
				<listitem>
					<para><literal>DahdiLinksetFactory</literal> </para>
					<programlisting language="XML" role="XML"><![CDATA[
	<bean name="DahdiLinksetFactory"
		class="org.mobicents.ss7.hardware.dahdi.oam.DahdiLinksetFactory">
	</bean>]]>
                        </programlisting>					
				</listitem>
			</itemizedlist>					
			
			<para> <literal>LinksetFactoryFactory</literal> is just a call-back class listening for new factories deployed 
			and maintains Map of available factory name vs factory. You should never touch this bean.</para>
			
		<section id="configuring_LinksetManager">
			<title>Configuring LinksetManager</title>
			<para> 
				<literal>LinksetManager</literal> is responsible for managing <literal>Linkset</literal> and <literal>Link</literal>.
			</para>
			<programlisting language="XML" role="XML"><![CDATA[<!-- ================================================ -->
    <!-- Linkset manager Service                                              -->
    <!-- ================================================ -->
	<bean name="LinksetManager"
		class="org.mobicents.ss7.linkset.oam.LinksetManager">

		<property name="linksetFactoryFactory">
			<inject bean="LinksetFactoryFactory" />
		</property>
		<property name="persistDir">${jboss.server.data.dir}</property>
	</bean>
	
	<bean name="LinksetExecutor"
		class="org.mobicents.ss7.linkset.oam.LinksetExecutor">
		<property name="linksetManager">
			<inject bean="LinksetManager" />
		</property>
	</bean>]]></programlisting>		
			<para>LinksetManager when started looks for file  <filename>linksetmanager.xml</filename> containing serialized information about 
			underlying linksets and links. The directory path is configurable by changing value of <literal>persistDir</literal> property.</para>
			<warning><para><filename>linksetmanager.xml</filename> should never be edited by hand. Always use Shell Client to connect to 
			&THIS.PLATFORM; &THIS.APPLICATION; and execute commands.</para></warning>	
			<para><literal>LinksetExecutor</literal> accepts the <literal>linkset</literal> commands and executes necessary operations.</para>
		</section>	
		</section>
		
		<section id="configuring_dialogic">
			<title>Configuring dialogic</title>
			<para><literal>Dialogic</literal> based MTP layer will only be used when you have installed Dialogic cards. 
			
			<literal>DialogicMtp3UserPart</literal> communicates with Dialogic hardware. It is assumed here that MTP3 and MTP2 is leveraged from
			Dialogic stack either on-board or on-host. 
			</para>
			

					<programlisting language="XML" role="XML"><![CDATA[
	<!-- ==================================================================== -->
	<!-- Dialogic Mtp3UserPart -->
	<!-- ==================================================================== -->
	<!---->
	<bean name="Mtp3UserPart" class="org.mobicents.ss7.hardware.dialogic.DialogicMtp3UserPart">
		<property name="sourceModuleId">61</property>
		<property name="destinationModuleId">34</property>
		<property name="routingLabelFormat">
			<inject bean="RoutingLabelFormat" />
		</property>		
	</bean>]]>
                        </programlisting>					
			 <para>
             	Stack has following properties:
             	<variablelist>
             		<varlistentry>
             			<term>sourceModuleId</term>
             			<listitem>
             				<para>
             					<literal>sourceModuleId</literal> is source module id and should match with configured in 
								<filename>system.txt</filename> used by dialogic drivers. Here 61 is assigned for Mobicents process.
             				</para>
             			</listitem>
             		</varlistentry>    
             		<varlistentry>
             			<term>destinationModuleId</term>
             			<listitem>
             				<para>
             					<literal>destinationModuleId</literal> is destination module id. 34 is Dialogic MTP3 module id.
             				</para>
             			</listitem>
             		</varlistentry>              		         	
             		<varlistentry>
             			<term>routingLabelFormat</term>
             			<listitem>
             				<para>
             					The routing label format supported by this network. See <xref linkend="configuring_routing_label_format"/> for further details.
             				</para>
             			</listitem>
             		</varlistentry>
             	</variablelist>
             </para>
		</section>
		
        <section id="configuring_routing_label_format">
        	<title>Configuring MTP3 routing label</title>
        	<para>
        		MTP Level 3 routes messages based on the routing label in the signaling information field (SIF) of
				message signal units. The routing label is comprised of the destination point code (DPC),
				originating point code (OPC), and signaling link selection (SLS) field. Overtime different standards 
				cameup with different routing label format. For example An ANSI routing label uses 7 octets; an ITU-T routing label uses 4 octets.
        	</para>
        	<para>
        		&THIS.PLATFORM; &THIS.APPLICATION; is flexible to configure the routing label as shown below.
        	</para>
					<programlisting language="XML" role="XML"><![CDATA[
	<!-- ==================================================================== -->
	<!-- MTP3 Properties -->
	<!-- Define MTP3 routing label Format -->
	<!-- ==================================================================== -->
	<bean name="RoutingLabelFormat" class="org.mobicents.protocols.ss7.mtp.RoutingLabelFormat">
		<constructor factoryClass="org.mobicents.protocols.ss7.mtp.RoutingLabelFormat"
			factoryMethod="getInstance">
			<parameter>ITU</parameter>
		</constructor>
	</bean>]]>
                        </programlisting>	
			<para>
				Following table shows various routing formats supported
			</para> 
				<table frame="all" pgwide="1">
					<title>Routing Format</title>
					<tgroup colsep="1" cols="3">
						<colspec colnum="1" colname="c0" colwidth="3*" />
						<colspec colnum="2" colname="c3" colwidth="3*" />
						<colspec colnum="3" colname="c6" colwidth="3*" />
						<thead>
							<row>
								<entry>Name</entry>
								<entry>point code length</entry>
								<entry>sls length</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>ITU</entry>
								<entry>14-bits</entry>
								<entry>4-bits</entry>
							</row>
							<row>
								<entry>ANSI_Sls8Bit</entry>
								<entry>24-bits</entry>
								<entry>8-bits</entry>
							</row>
							<row>
								<entry>ANSI_Sls5Bit</entry>
								<entry>24-bits</entry>
								<entry>5-bits</entry>
							</row>
						</tbody>						
					</tgroup>
				</table>			                              	
        </section>		
        
        <section id="configuring_SCCP">
                        <title>Configuring SCCP</title>
                        <para> 
                                As name suggests <literal>SccpStack</literal> initiates the SCCP stack routines. 
                        </para>
                        <programlisting language="XML" role="XML"><![CDATA[     <!-- ==================================================================== -->
        <!-- SCCP Service -->
        <!-- ==================================================================== -->
	<bean name="SccpStack" class="org.mobicents.protocols.ss7.sccp.impl.SccpStackImpl">
		<constructor>
			<parameter>SccpStack</parameter>
		</constructor>
		<property name="persistDir">${jboss.server.data.dir}</property>
		<property name="removeSpc">true</property>
		<property name="mtp3UserParts">
			<map keyClass="java.lang.Integer" valueClass="org.mobicents.protocols.ss7.mtp.Mtp3UserPart">
				<entry>
					<key>1</key>
					<value>
						<inject bean="Mtp3UserPart" />
					</value>
				</entry>
			</map>
		</property>
	</bean>

	<bean name="SccpExecutor"
		class="org.mobicents.protocols.ss7.sccp.impl.oam.SccpExecutor">
		<property name="sccpStack">
			<inject bean="SccpStack" />
		</property>
	</bean>]]></programlisting>     
                        <para>
                                <classname>org.mobicents.protocols.ss7.sccp.impl.SccpStackImpl</classname> takes <classname>String</classname> as constructor
                                argument. The name is prepend to <literal>xml</literal> file created by SCCP stack for persisting state of SCCP resources. 
                                The <literal>xml</literal> is stored in path specified by <literal>persistDir</literal> property above.
                        </para>
                        <para>
                                For example in above case, when &THIS.PLATFORM; SS7 Service is started two file's <filename>SccpStack_sccpresource.xml</filename> 
                                and <filename>SccpStack_sccprouter.xml</filename> will be created at <filename>$JBOSS_HOME/server/profile_name/data</filename> directory
                        </para>                         
                        <para>                          
                                Stack has following properties: 
                                <variablelist>
                                        <varlistentry>
                                                <term>persistDir</term>
                                                <listitem>
                                                        <para>As explained above</para>
                                                </listitem>
                                        </varlistentry>                                 
                                        <varlistentry>
                                                <term>removeSpc</term>
                                                <listitem>
                                                        <para>
                                                                After Global Title Translation, if the SCCP address includes the destination point code (DPC)
                                                                however Address Indicator (AI) indicates route on Global Title and <literal>removeSpc</literal> is
                                                                set to true, DPC will be removed from SCCP Address. The same rule applies for both calling as
                                                                well as called party SCCP Address. 
                                                        </para>
                                                </listitem>
                                        </varlistentry>                                 
                                        <varlistentry>
                                                <term>mtp3UserParts</term>
                                                <listitem>
                                                        <para>specifies SS7 Level 3 to be used as transport medium(  be it SS7 card or M3UA). &THIS.PLATFORM; &THIS.APPLICATION; SCCP allows configuring multiple MTP3 layers for 
                                                        same SCCP stack. This allows to have multiple local point-code and connecting to various networks while SCCP layer remains same </para>
                                                </listitem>
                                        </varlistentry>
                                </variablelist>
                        </para>

                        <para> <literal>SccpExecutor</literal> accepts <literal>sccp</literal> commands and executes necessary operations</para>
                </section>                      
                <section id="configuring_ShellExecutor">
                        <title>Configuring ShellExecutor</title>
                        <para> 
                                <literal>ShellExecutor</literal> is responsible for listening incoming commands. Received commands are executed on local resources to 
                                perform actions like creation and management of <literal>SCCP</literal> routing rule, management of <literal>SCTP</literal> and 
                                management of <literal>M3UA</literal> stack.
                        </para>
                        <programlisting language="XML" role="XML"><![CDATA[	<!-- ==================================================================== -->
	<!-- Shell Service -->
	<!-- ==================================================================== -->
	<!-- Define Shell Executor -->
	<bean name="ShellExecutor" class="org.mobicents.ss7.management.console.ShellServer">
		<constructor>
			<parameter>
				<inject bean="SS7Scheduler" />
			</parameter>
			<parameter>
				<list class="javolution.util.FastList"
					elementClass="org.mobicents.ss7.management.console.ShellExecutor">
					<inject bean="SccpExecutor" />
					<inject bean="M3UAShellExecutor" />
					<inject bean="SCTPShellExecutor" />
				</list>
			</parameter>
		</constructor>

		<property name="address">${jboss.bind.address}</property>
		<property name="port">3435</property>
	</bean>]]></programlisting>             
                        <para>By default ShellExecutor listens at <literal>jboss.bind.address</literal> and port <literal>3435</literal>. 
                        You may set the <literal>address</literal> property to any valid IP address that your host is assigned. 
                        The shell commands are exchanged over TCP/IP.</para>
                        <note><para>To understand JBoss bind options look at 
                        <ulink url="http://docs.jboss.org/jbossas/docs/Installation_And_Getting_Started_Guide/5/html_single/index.html">Installation_And_Getting_Started_Guide</ulink> </para> </note>
                        
                        <para>
                        	<literal>SCTPShellExecutor</literal> and <literal>M3UAShellExecutor</literal> is declared only if MTP layer <literal>M3UA</literal> is used. If <literal>dialogic</literal>
                        	MTP layer is used these beans are not decalred and should be removed from <classname>FastList</classname> too. For <literal>dahdi</literal> need to declare <literal>LinksetExecutor</literal>
                        	bean and add in <classname>FastList</classname> above.
                        </para>
                                
                </section>   
                

                <section id="configuring_TCAP">
                        <title>Configuring TCAP</title>
                        <para> 
                                <literal>TcapStack</literal> initiates the TCAP stack routines. Respective TCAP stack beans are instantiated for each <literal>MAP</literal>, <literal>CAP</literal>
                                Service. If you are using either one, feel free to delete the other.
                        </para>
                        <programlisting language="XML" role="XML"><![CDATA[     	
	<!-- ==================================================================== -->
	<!-- TCAP Service -->
	<!-- ==================================================================== -->	
	<bean name="TcapStackMap" class="org.mobicents.protocols.ss7.tcap.TCAPStackImpl">
		<constructor>
			<parameter>
				<inject bean="SccpStack" property="sccpProvider" />
			</parameter>
			<parameter>8</parameter>
		</constructor>
		<property name="dialogIdleTimeout">60000</property>
		<property name="invokeTimeout">30000</property>
		<property name="maxDialogs">25000</property>
	</bean>

	<bean name="TcapStackCap" class="org.mobicents.protocols.ss7.tcap.TCAPStackImpl">
		<constructor>
			<parameter>
				<inject bean="SccpStack" property="sccpProvider" />
			</parameter>
			<parameter>146</parameter>
		</constructor>
		<property name="dialogIdleTimeout">60000</property>
		<property name="invokeTimeout">30000</property>
		<property name="maxDialogs">25000</property>
	</bean>
	
	<bean name="TcapStack" class="org.mobicents.protocols.ss7.tcap.TCAPStackImpl">
		<constructor>
			<parameter>
				<inject bean="SccpStack" property="sccpProvider" />
			</parameter>
			<parameter>9</parameter>
		</constructor>
		<property name="dialogIdleTimeout">60000</property>
		<property name="invokeTimeout">30000</property>
		<property name="maxDialogs">25000</property>
	</bean>]]></programlisting>   
                        <para>
                                <classname>org.mobicents.protocols.ss7.tcap.TCAPStackImpl</classname> takes <classname>SccpStack</classname> as constructor
                                argument. TCAP uses passed SCCP stack. Constructor also takes the sub system number (SSN) which is registered with passed SCCP stack.
                        </para>	
	  
                        <para>                          
                                TCAP Stack has following configurable properties: 
                                <variablelist>
                                        <varlistentry>
                                                <term>dialogIdleTimeout: public void setDialogIdleTimeout(long l);</term>
                                                <listitem>
                                                        <para>This property specifies how long a dialog can be idle (i.e. not receive/send any messages) before a timeout occurs. The value is specified in milliseconds. When a timeout occurs the method <literal>TCListener.onDialogTimeout()</literal> will be invoked. If a TCAP-User does not invoke <literal>Dialog.keepAlive()</literal> inside the method <literal>TCListener.onDialogTimeout()</literal>, the TCAP Dialog will be released.</para>
                                                </listitem>
                                        </varlistentry>                                 
                                        <varlistentry>
                                                <term>invokeTimeout: public void setInvokeTimeout(long l);</term>
                                                <listitem>
                                                        <para>This property specifies, by default, how long Invoke will wait for a response from a peer before a timeout occurs. The value is specified in milliseconds. If a TCAP-User does not specify a custom Invoke timeout when sending a new Invoke, this default value will be used for outgoing Invoke timeout. When this timeout occurs <literal>TCListener.onInvokeTimeout()</literal> will be invoked. 
                                                        </para>
                                                </listitem>
                                        </varlistentry> 
  					<varlistentry>
                                                <term>maxDialogs: public void setMaxDialogs(int v); </term>
                                                <listitem>
                                                        <para>
This property specifes the maximum number of concurrent dialogs allowed to be alive at any point of time. If this property is not set, a default value of 5000 dialogs will be used. If an application attempts to create more dialogs than this maximum number specified, an Exception is thrown.
                                                        </para>
                                                </listitem>
                                        </varlistentry>
                                                        	

                                        <varlistentry>
                                                <term>dialogIdRangeStart: public void setDialogIdRangeStart(long val);</term>
                                                <listitem>
                                                        <para>
TCAP stack can be configured to use a range of local DialogId values. You may install a set of TCAP Stack instances with different DialogId ranges. These ranges can be used for loadsharing of SS7 traffic between the TCAP instances.
All the outgoing Dialogs will have id starting with <literal>dialogIdRangeStart</literal>. This value of <literal>dialogIdRangeStart</literal> cannt be greater than <literal>dialogIdRangeEnd</literal>. In addition, the value of <literal>dialogIdRangeEnd - dialogIdRangeStart</literal> must always be less than the value of <literal>maxDialogs</literal>. </para>
                                                </listitem>
                                        </varlistentry>   
                                        <varlistentry>
                                                <term>dialogIdRangeEnd: public void setDialogIdRangeStart(long val);</term>
                                                <listitem>
                                                        <para>
                                                        	All the outgoing Dialogs will have id starting with <literal>dialogIdRangeStart</literal> and incremented by 1 for each new outgoing dialog till <literal>dialogIdRangeEnd</literal>. After this,
                                                        	dialog will again start from the value of<literal>dialogIdRangeStart</literal>.
                                                        </para>
                                                </listitem>
                                       </varlistentry>   
                                        <varlistentry>
                                                <term>previewMode: public void setPreviewMode(boolean val);</term>
                                                <listitem>
                                                        <para>
                                                        	PreviewMode is needed for special processing mode. By default TCAP is not set in PreviewMode. When PreviewMode set in TCAP level:
<itemizedlist>
	<listitem>
		<para>Stack only listens for incoming messages and does not send anything. The methods <literal>send()</literal>,
  <literal>close()</literal>, <literal>sendComponent()</literal> and other such methods do nothing.</para>
	</listitem>
	<listitem>
		<para>A TCAP Dialog is temporary. TCAP Dialog is discarded after any
   incoming message like TC-BEGIN or TC-CONTINUE has been processed.</para>
	</listitem>
	<listitem>
		<para>For any incoming messages (including TC-CONTINUE, TC-END, TC-ABORT)
   a new TCAP Dialog is created (and then deleted).</para>
	</listitem>
	<listitem>
		<para>There are no timers and timeouts.</para>
	</listitem>
</itemizedlist>
                                                        </para>
                                                </listitem>
                                       </varlistentry>                       
                                </variablelist>
                        </para>


                </section>  

                <section id="configuring_MAP">
                        <title>Configuring MAP</title>
                        <para> 
                                <literal>MapStack</literal> initiates the MAP stack routines. 
                        </para>
                        <programlisting language="XML" role="XML"><![CDATA[<!-- ==================================================================== -->
	<!-- MAP Service -->
	<!-- ==================================================================== -->	
	<bean name="MapStack" class="org.mobicents.protocols.ss7.map.MAPStackImpl">
		<constructor>
			<parameter>
				<inject bean="TcapStackMap" property="provider" />
			</parameter>
		</constructor>
	</bean>]]></programlisting>     
                         <para>
                                <classname>org.mobicents.protocols.ss7.map.MAPStackImpl</classname> takes <classname>TcapStack</classname> as constructor
                                argument. MAP uses passed TCAP stack. 
                        </para>	
                         <para>
                        	Feel free to delete declaration of this bean if your service is consuming only CAP messages.
                        </para>                       
                </section> 

                <section id="configuring_CAP">
                        <title>Configuring CAP</title>
                        <para> 
                                <literal>CapStack</literal> initiates the CAP stack routines. 
                        </para>
                        <programlisting language="XML" role="XML"><![CDATA[	<!-- ==================================================================== -->
	<!-- CAP Service -->
	<!-- ==================================================================== -->
	<bean name="CapStack" class="org.mobicents.protocols.ss7.cap.CAPStackImpl">
		<constructor>
			<parameter>
				<inject bean="TcapStackCap" property="provider" />
			</parameter>
		</constructor>
	</bean>]]></programlisting>     
                         <para>
                                <classname>org.mobicents.protocols.ss7.cap.CAPStackImpl</classname> takes <classname>TcapStack</classname> as constructor
                                argument. CAP uses passed TCAP stack. 
                        </para>	
                        <para>
                        	Feel free to delete declaration of this bean if your service is consuming only MAP messages.
                        </para>
                </section> 

                 <section id="configuring_ISUP">
                        <title>Configuring ISUP</title>
                        <para> 
                                <literal>IsupStack</literal> initiates the ISUP stack routines. 
                        </para>
                        <programlisting language="XML" role="XML"><![CDATA[	<!-- ==================================================================== -->
	<!-- ISUP Service -->
	<!-- ==================================================================== -->
	<bean name="CircuitManager"
		class="org.mobicents.protocols.ss7.isup.impl.CircuitManagerImpl">
	</bean>

	<bean name="IsupStack" class="org.mobicents.protocols.ss7.isup.impl.ISUPStackImpl">
		<constructor>
			<parameter>
				<inject bean="SS7Scheduler" />
			</parameter>
			<parameter>22234</parameter>
			<parameter>2</parameter>
		</constructor>
		<property name="mtp3UserPart">
			<inject bean="Mtp3UserPart" />
		</property>
		<property name="circuitManager">
			<inject bean="CircuitManager" />
		</property>
	</bean>]]></programlisting>     
                         <para>
                                <classname>org.mobicents.protocols.ss7.isup.impl.ISUPStackImpl</classname> takes <classname>SS7Scheduler</classname>, local signaling pointcode and network indicator
                                 as constructor argument. MAP uses passed TCAP stack. 
                        </para>	
                        
                        	  
                        <para>                          
                                Stack has following properties: 
                                <variablelist>
                                        <varlistentry>
                                                <term>mtp3UserPart</term>
                                                <listitem>
                                                        <para>specifies SS7 Level 3 to be used as transport medium( be it SS7 card or M3UA). </para>
                                                </listitem>
                                        </varlistentry>                                 
                                        <varlistentry>
                                                <term>circuitManager</term>
                                                <listitem>
                                                        <para>
                                                               CIC management bean
                                                        </para>
                                                </listitem>
                                        </varlistentry>                                 
                                </variablelist>
                        </para>
                        
                         <para>
                        	Feel free to delete declaration of this bean if your service is not consuming ISUP messages.
                        </para>                       
                </section> 
                                                  
                <section id="configuring_SS7Service">
                        <title>Configuring SS7Service</title>
                        <para> 
                                SS7Service acts as core engine binding all the components together. 
                        </para>
                        <programlisting language="XML" role="XML"><![CDATA[<!-- ==================================================================== -->
	<!-- Mobicents SS7 Service -->
	<!-- ==================================================================== -->
	<bean name="TCAPSS7Service" class="org.mobicents.ss7.SS7Service">
		<constructor><parameter>TCAP</parameter></constructor>
		<annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(name="org.mobicents.ss7:service=TCAPSS7Service",exposedInterface=org.mobicents.ss7.SS7ServiceMBean.class,registerDirectly=true)
		</annotation>
		<property name="jndiName">java:/mobicents/ss7/tcap</property>
		<property name="stack">
			<inject bean="TcapStack" property="provider" />
		</property>
	</bean>
	<bean name="MAPSS7Service" class="org.mobicents.ss7.SS7Service">
		<constructor><parameter>MAP</parameter></constructor>
		<annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(name="org.mobicents.ss7:service=MAPSS7Service",exposedInterface=org.mobicents.ss7.SS7ServiceMBean.class,registerDirectly=true)
		</annotation>
		<property name="jndiName">java:/mobicents/ss7/map</property>
		<property name="stack">
			<inject bean="MapStack" property="MAPProvider" />
		</property>
	</bean>
	<bean name="CAPSS7Service" class="org.mobicents.ss7.SS7Service">
		<constructor><parameter>CAP</parameter></constructor>
		<annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(name="org.mobicents.ss7:service=CAPSS7Service",exposedInterface=org.mobicents.ss7.SS7ServiceMBean.class,registerDirectly=true)
		</annotation>
		<property name="jndiName">java:/mobicents/ss7/cap</property>
		<property name="stack">
			<inject bean="CapStack" property="CAPProvider" />
		</property>
	</bean>
	<bean name="ISUPSS7Service" class="org.mobicents.ss7.SS7Service">
		<constructor><parameter>ISUP</parameter></constructor>
		<annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(name="org.mobicents.ss7:service=ISUPSS7Service",exposedInterface=org.mobicents.ss7.SS7ServiceMBean.class,registerDirectly=true)
		</annotation>
		<property name="jndiName">java:/mobicents/ss7/isup</property>
		<property name="stack">
			<inject bean="IsupStack" property="isupProvider" />
		</property>
	</bean>]]></programlisting> 
						<para> TCAPSS7Service binds TcapStack to JNDI <literal>java:/mobicents/ss7/tcap</literal>. </para>            
                        <para> MAPSS7Service binds MapStack to JNDI <literal>java:/mobicents/ss7/map</literal>. </para>
                        <para> CAPSS7Service binds CapStack to JNDI <literal>java:/mobicents/ss7/cap</literal>. </para>
                          <para> ISUPSS7Service binds IsupStack to JNDI <literal>java:/mobicents/ss7/isup</literal>. </para>
                        <para>The JNDI name can be configured to any valid JNDI name specific to your application.</para>
                        <para>Feel free to delete service that your application is not using.</para>
                </section>  		
	</section>
		
		
<!-- Configuring Signaling Gateway -->		
		<section
			id="installing_sgw_binary">
			<title>Installing &THIS.PLATFORM; Signaling Gateway Binary</title>
			<para>
				&THIS.PLATFORM; Signaling Gateway Binary doesn't require any additional steps. You may copy <literal>mobicents-sgw</literal>
				to any folder of your choice.
			</para>	
		</section>		
		
		
		<section
			id="running_sgw_binary">
			<title>Running &THIS.PLATFORM; Signaling Gateway</title>
			<para>
				In the Linux terminal or Windows command prompt, the
				&THIS.PLATFORM; Signaling Gateway has started successfully if the
				last line of output is similar to the following
			</para>
			<programlisting><![CDATA[15:51:18,247 INFO  [MainDeployer] [[[[[[[[[ Mobicents Signaling Gateway: release.version=]]>&THIS.VERSION; <![CDATA[Started ]]]]]]]]]]]></programlisting>
			
			<section id="starting_sgw_binary">
			<title>Starting &THIS.PLATFORM; Signaling Gateway</title>			
				<procedure>
					<title>
						Running the &THIS.PLATFORM; Signaling Gateway on Linux
					</title>
					<step>
						<para>
							Change the working directory to installation
							directory (the one in which the zip file's
							contents was extracted to)
						</para>
						<screen>downloads]$ cd &quot;mobicents-ss7-&lt;version&gt;/ss7/mobicents-sgw&quot;</screen>
					</step>
					<step>
						<para>
							(Optional) Ensure that the
							<filename>bin/run.sh</filename>
							start script is executable.
						</para>
						<screen>mobicents-sgw$ chmod +x bin/run.sh</screen>
					</step>
					<step>
						<para>
							Execute the
							<filename>run.sh</filename>
							Bourne shell script.
						</para>
						<screen>mobicents-sgw$ ./bin/run.sh</screen>
					</step>
				</procedure>
	
				<procedure>
					<title>
						Running the &THIS.PLATFORM; Signaling Gateway on <productname>Windows</productname>
					</title>
					<step>
						<para>
							Using Windows Explorer, navigate to the <filename>bin</filename> subfolder in the installation directory.
						</para>
					</step>
					<step>
						<para>
							The preferred way to start the &THIS.PLATFORM; Signaling Gateway is from the Command Prompt. The command
							line interface displays details of the startup
							process, including any problems encountered
							during the startup process.
						</para>
						<para>
							Open the Command Prompt via the <guilabel>Start</guilabel> menu and navigate to the correct folder:
						</para>
						<screen>C:\Users\&lt;user&gt;\My	Downloads&gt;cd &quot;mobicents-ss7-&lt;version&gt;\ss7\mobicents-sgw&quot;</screen>
					</step>
					<step>
						<para>
							Start the Gateway by executing one of the following files:
							<itemizedlist>
								<listitem>
									<para>
										<filename>run.bat</filename>
										batch file:
									</para>
									<screen>C:\Users\&lt;user&gt;\My Downloads\mms-standalone&lt;version&gt;&gt;bin\run.bat</screen>
								</listitem>
							</itemizedlist>
						</para>
					</step>
				</procedure>	
			</section>		
			<section id="sgw-Running-alter">
				<title>Start the Gateway With Alternate Configuration</title>
				<para>
					Using <literal>run.sh</literal> without any arguments binds the gateway to <literal>127.0.0.1</literal>. 
					To bind gateway to different ip, pass the ip address as value to <literal>-b</literal> command line option. 
					For example to bind the server to <literal>115.252.103.220</literal>
				</para>
				<screen>mobicents-sgw$ ./bin/run.sh -b 115.252.103.220</screen>
			</section>	
			<section id="sgw-Stopping">
				<title>Stopping</title>
				<para>
					The only option to stop the gateway is by pressing <literal>Ctrl c</literal>  and bringing down the JVM or kill the process.
				</para>
			</section>					
		</section>			
		
	<section id="configuring_sgw">
		<title>
			Configuring &THIS.PLATFORM; Signaling Gateway
		</title>
		<para>Configuration is done through an XML descriptor named <filename>sgw-beans.xml</filename> and is 
		located at <filename>mobicents-sgw/deploy</filename>, </para>
		
		<section id="configuring_SGWP">
			<title>Configuring M3AU (Signaling Gateway)</title>
			<para> 
				SGW will expose the SS7 signals received from legacy network to IP network over M3AU
			</para>
			
					<programlisting language="XML" role="XML"><![CDATA[
	<bean name="SCTPManagement" class="org.mobicents.protocols.sctp.ManagementImpl">
		<constructor>
			<parameter>SCTPManagement</parameter>
		</constructor>
		<property name="persistDir">${sgw.home.dir}/ss7</property>
		<property name="singleThread">true</property>
		<property name="connectDelay">30000</property>
	</bean>

	<bean name="SCTPShellExecutor"
		class="org.mobicents.protocols.ss7.m3ua.impl.oam.SCTPShellExecutor">
		<property name="sctpManagement">
			<inject bean="SCTPManagement" />
		</property>
	</bean>
	
	<bean name="Mtp3UserPart" class="org.mobicents.protocols.ss7.m3ua.impl.M3UAManagement">
		<constructor>
			<parameter>Mtp3UserPart</parameter>
		</constructor>
		<property name="persistDir">${sgw.home.dir}/ss7</property>
		<property name="transportManagement">
			<inject bean="SCTPManagement" />
		</property>
	</bean>

	<bean name="M3UAShellExecutor"
		class="org.mobicents.protocols.ss7.m3ua.impl.oam.M3UAShellExecutor">
		<property name="m3uaManagement">
			<inject bean="Mtp3UserPart" />
		</property>
	</bean>]]>
                        </programlisting>	
		</section>
					
		<section id="sgw_configuring_LinksetFactory">
			<title>Configuring LinksetFactory</title>
			<para> Concrete implementation of <literal>LinksetFactory</literal> is responsible to create 
			new instances of corresponding <literal>Linkset</literal> when instructed by <literal>LinksetManager</literal>. 
			&THIS.PLATFORM; Signaling Gateway defines two linkset factories : </para>
			
			<itemizedlist>
				<listitem>
					<para><literal>DahdiLinksetFactory</literal> </para>
					<programlisting language="XML" role="XML"><![CDATA[
	<bean name="DahdiLinksetFactory"
		class="org.mobicents.ss7.hardware.dahdi.oam.DahdiLinksetFactory">
	</bean>]]>
                        </programlisting>					
				</listitem>
				<listitem>
					<para><literal>DialogicLinksetFactory</literal></para>
					 <programlisting language="XML" role="XML"><![CDATA[
	<bean name="DialogicLinksetFactory"
		class="org.mobicents.ss7.hardware.dialogic.oam.DialogicLinksetFactory">
	</bean>]]>
                        </programlisting>
				</listitem>
			</itemizedlist>					
			<para>Its highly unlikely that you would require both the factories on same gateway. If you have <literal>dahdi</literal> based 
			SS7 card installed, keep <literal>DahdiLinksetFactory</literal> and remove other. If you have <literal>dialogic</literal> based 
			SS7 card installed, keep <literal>DialogicLinksetFactory</literal> and remove other. 
			</para>
			<para> <literal>LinksetFactoryFactory</literal> is just a call-back class listening for new factories deployed 
			and maintains Map of available factory name vs factory. You should never touch this bean.</para>
		</section>	
		<section id="sgw_configuring_LinksetManager">
			<title>Configuring LinksetManager</title>
			<para> 
				<literal>LinksetManager</literal> is responsible for managing <literal>Linkset</literal> and <literal>Link</literal>.
			</para>
			<programlisting language="XML" role="XML"><![CDATA[<!-- ================================================ -->
    <!-- Linkset manager Service                                              -->
    <!-- ================================================ -->
	<bean name="LinksetManager"
		class="org.mobicents.ss7.linkset.oam.LinksetManager">

		<property name="linksetFactoryFactory">
			<inject bean="LinksetFactoryFactory" />
		</property>
		<property name="persistDir">${linkset.persist.dir}</property>
	</bean>
	
	<bean name="LinksetExecutor"
		class="org.mobicents.ss7.linkset.oam.LinksetExecutor">
		<property name="linksetManager">
			<inject bean="LinksetManager" />
		</property>
	</bean>]]></programlisting>		
			<para>LinksetManager when started looks for file  <filename>linksetmanager.xml</filename> containing serialized information about 
			underlying linksets and links. The directory path is configurable by changing value of <literal>persistDir</literal> property.</para>
			<warning><para><filename>linksetmanager.xml</filename> should never be edited by hand. Always use Shell Client to connect to 
			&THIS.PLATFORM; Signaling Gateway and execute commands.</para></warning>	
			<para><literal>LinksetExecutor</literal> accepts the <literal>linkset</literal> commands and executes necessary operations.</para>
		</section>	
		
		<section id="sgw_configuring_ShellExecutor">
			<title>Configuring ShellExecutor</title>
			<para> 
				<literal>ShellExecutor</literal> is responsible for listening to incoming command. Received commands are executed on local resources to 
				perform actions like creation and management of <literal>Linkset</literal>, 
				management of <literal>M3UA</literal> stack.
			</para>
			<programlisting language="XML" role="XML"><![CDATA[<!-- ================================================ -->
    <!-- Shell Service                                                        -->
    <!-- ================================================ -->
	<bean name="ShellExecutor" class="org.mobicents.ss7.management.console.ShellServer">
		<constructor>
			<parameter>
				<inject bean="Scheduler" />
			</parameter>
			<parameter>
				<list class="javolution.util.FastList" elementClass="org.mobicents.ss7.management.console.ShellExecutor">
					<inject bean="M3UAShellExecutor" />
					<inject bean="SCTPShellExecutor" />
					<inject bean="LinksetExecutor" />
				</list>
			</parameter>
		</constructor>

		<property name="address">${sgw.bind.address}</property>
		<property name="port">3435</property>
	</bean>]]></programlisting>		
			<para>By default ShellExecutor listens at <literal>sgw.bind.address</literal> and port <literal>3436</literal>. 
			You may set the <literal>address</literal> property to any valid IP address that your host is assigned. 
			The shell commands are exchanged over TCP/IP.</para>
		</section>	
		
		<section id="sgw_configuring_SGW">
			<title>Configuring SignalingGateway</title>
			<para> 
				<literal>SignalingGateway</literal> acts as core engine binding all the components together. 
			</para>
			<programlisting language="XML" role="XML"><![CDATA[        <!-- ================================================ -->
    <!-- Mobicents Signaling Gateway                                      -->
    <!-- ================================================ -->
	<bean name="SignalingGateway"
		class="org.mobicents.ss7.sgw.SignalingGateway">

		<property name="shellExecutor">
			<inject bean="ShellExecutor" />
		</property>

		<property name="nodalInterworkingFunction">
			<inject bean="NodalInterworkingFunction" />
		</property>

	</bean>]]></programlisting>		
			<para>The <literal>NodalInterworkingFunction</literal> sits between the SS7 netwrok and IP network and routes messages 
			to/from both the MTP3 and the M3UA layer, based on the SS7 DPC or DPC/SI address information</para>
		</section>			
	</section>		
		
	<section
		id="source_code">
		<title>
			Setup from source
		</title>
		<para>&THIS.PLATFORM; &THIS.APPLICATION; is an open source project, instructions for building from source are part of the manual! 
		Building from source means you can stay on top with the latest features. Whilst aspects of &THIS.PLATFORM; &THIS.APPLICATION; are quite 
		complicated, you may find ways to become contributors.</para>
		
		<para>&THIS.PLATFORM; &THIS.APPLICATION; works with JDK1.5 and above (If using M3UA, JDK1.7 and above ). you will also need to have the following tools installed. 
		Minimum requirement version numbers provided.</para>
		
		<itemizedlist>
			<listitem>
				<para><literal>Git Client 1.6</literal> : Instructions for using GIT, including install, can be found at <ulink
								url="http://git-scm.com/book" /></para>
			</listitem>		
			<listitem>
				<para><literal>Subversion Client 1.4</literal> : Instructions for using SVN, including install, can be found at <ulink
								url="http://subversion.tigris.org" /></para>
			</listitem>
			<listitem>
				<para><literal>Maven 2.0.9</literal> : Instructions for using Maven, including install, can be found at <ulink
								url="http://maven.apache.org/" /></para>
			</listitem>	
			<listitem>
				<para><literal>Ant 1.7.0</literal> : Instructions for using Ant, including install, can be found at <ulink
								url="http://ant.apache.org" /></para>
			</listitem>	
		</itemizedlist>

		<section
			id="source_building">
			<title>Release Source Code Building</title>
			<procedure>
				<step>
					<title>Downloading the source code</title>
					
					<para>Use GIT to clone repository, the base URL is &THIS.TRUNK_SOURCE_CODE_URL;,
						then to checkout specific release version(tag) use <command>git checkout tag_name</command>, lets consider release-&THIS.VERSION;.
					</para>
					<programlisting>
[usr]$ git clone &THIS.TRUNK_SOURCE_CODE_URL;
[usr]$ cd jss7
[usr]$ git checkout release-&THIS.VERSION;
					</programlisting>
					<para>Browse the code online at <ulink url="&THIS.RELEASE_SOURCE_CODE_URL;" /> </para>
				</step>
				<step>
					<title>Building the source code</title>
					<para>Now that we have the source the next step is to build and install the source. 
					&THIS.PLATFORM; &THIS.APPLICATION; uses Maven 2 to build the system. There are three profiles. Default one builds only java source. The other two profiles 
					available "dahdilinux" and "dialogiclinux" additionaly compile native modules.</para>
					<note>
						<para>
							Native modules are supported only for linux OS for now.
						</para>
					</note>					
					<para>Use "dahdilinux" profile if linux server on which this code is built already has dahdi module installed. 
					Make sure you pass "include.zap" system property pointing to correct directory where dahdi is installed</para>
					<programlisting>
[usr]$ cd jss7
[usr]$ mvn install -Pdahdilinux -Dinclude.zap=/usr/include/dahdi
				    </programlisting>
				    
					<para>Use "dialogiclinux" profile if linux server on which this code is built already has dialogic module installed. 
					Make sure you pass "include.dialogic" and "include.dialogic.gctlib" system property pointing to correct directory where 
					dialogic libraries are installed. include.dialogic.gctlib points to directory where <literal>gctload</literal> is present (generally
					/opt/dpklnx for linux OS)</para>
					<programlisting>
[usr]$ cd jss7
[usr]$ mvn install -Pdialogclinux -Dinclude.dialogic=/opt/dpklnx/INC -Dinclude.dialogic.gctlib=/opt/dpklnx
				    </programlisting>	
				    
				   	<para>To build &THIS.PLATFORM; &THIS.APPLICATION; without building any native libraries use</para>
					<programlisting>
[usr]$ cd jss7
[usr]$ mvn install 
				    </programlisting>
					<note>
						<para>
							If you are using &THIS.PLATFORM; &THIS.APPLICATION; without any native dependencies, &THIS.PLATFORM; &THIS.APPLICATION; can run on any OS.
						</para>
					</note>
									    
							    
					<para>Use Ant to build the binary .</para>
					<programlisting>
[usr]$ cd jss7/release
[usr]$ ant
				    </programlisting>

				</step>
			</procedure>
		</section>

		<section
			id="trunk_source_building">
			<title>Development Trunk Source Building</title>
			<para>
				Similar process as for
				<xref
					linkend="source_building" />,
				the only change is don't switch to specific tag.
			</para>
		</section>

	</section>
</chapter>

